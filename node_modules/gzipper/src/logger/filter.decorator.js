"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.filter = void 0;
var LogLevel_enum_1 = require("./LogLevel.enum");
/**
 * Exec only 'ERROR', 'WARNING', 'SUCCESS' or when 'verbose' flag is available.
 */
function filter() {
    return function (_target, _propertyKey, descriptor) {
        var valueDescriptor = descriptor.value;
        descriptor.value = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var _a = __read(args, 2), level = _a[1];
            var shouldLog = this.verbose ||
                level === LogLevel_enum_1.LogLevel.ERROR ||
                level === LogLevel_enum_1.LogLevel.WARNING ||
                level === LogLevel_enum_1.LogLevel.SUCCESS;
            return shouldLog ? valueDescriptor.call.apply(valueDescriptor, __spreadArray(__spreadArray([this], __read(args)), [level])) : null;
        };
        return descriptor;
    };
}
exports.filter = filter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLmRlY29yYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9sb2dnZXIvZmlsdGVyLmRlY29yYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSxpREFBMkM7QUFFM0M7O0dBRUc7QUFDSCxTQUFnQixNQUFNO0lBS3BCLE9BQU8sVUFBVSxPQUFPLEVBQUUsWUFBWSxFQUFFLFVBQVU7UUFDaEQsSUFBTSxlQUFlLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQztRQUV6QyxVQUFVLENBQUMsS0FBSyxHQUFHO1lBQVUsY0FBMkI7aUJBQTNCLFVBQTJCLEVBQTNCLHFCQUEyQixFQUEzQixJQUEyQjtnQkFBM0IseUJBQTJCOztZQUNoRCxJQUFBLEtBQUEsT0FBWSxJQUFJLElBQUEsRUFBYixLQUFLLFFBQVEsQ0FBQztZQUN2QixJQUFNLFNBQVMsR0FDWixJQUFlLENBQUMsT0FBTztnQkFDeEIsS0FBSyxLQUFLLHdCQUFRLENBQUMsS0FBSztnQkFDeEIsS0FBSyxLQUFLLHdCQUFRLENBQUMsT0FBTztnQkFDMUIsS0FBSyxLQUFLLHdCQUFRLENBQUMsT0FBTyxDQUFDO1lBRTdCLE9BQU8sU0FBUyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsSUFBSSxPQUFwQixlQUFlLCtCQUFNLElBQUksVUFBSyxJQUFJLEtBQUUsS0FBSyxJQUFFLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDdkUsQ0FBQyxDQUFDO1FBRUYsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQXJCRCx3QkFxQkMifQ==