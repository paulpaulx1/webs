"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Compress = void 0;
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var util_1 = __importDefault(require("util"));
var uuid_1 = require("uuid");
var stream_1 = __importDefault(require("stream"));
var helpers_1 = require("./helpers");
var Logger_1 = require("./logger/Logger");
var Brotli_1 = require("./compressions/Brotli");
var Gzip_1 = require("./compressions/Gzip");
var constants_1 = require("./constants");
var Deflate_1 = require("./compressions/Deflate");
var Incremental_1 = require("./Incremental");
var Config_1 = require("./Config");
var LogLevel_enum_1 = require("./logger/LogLevel.enum");
/**
 * Compressing files.
 */
var Compress = /** @class */ (function () {
    /**
     * Creates an instance of Compress.
     */
    function Compress(target, outputPath, options) {
        if (options === void 0) { options = {}; }
        this.nativeFs = {
            lstat: util_1.default.promisify(fs_1.default.lstat),
            readdir: util_1.default.promisify(fs_1.default.readdir),
            exists: util_1.default.promisify(fs_1.default.exists),
            unlink: util_1.default.promisify(fs_1.default.unlink),
        };
        this.nativeStream = {
            pipeline: util_1.default.promisify(stream_1.default.pipeline),
        };
        this.logger = new Logger_1.Logger(options.verbose);
        this.config = new Config_1.Config();
        if (!target) {
            var message = constants_1.NO_PATH_MESSAGE;
            this.logger.log(message, LogLevel_enum_1.LogLevel.ERROR);
            throw new Error(message);
        }
        if (outputPath) {
            this.outputPath = path_1.default.resolve(process.cwd(), outputPath);
        }
        if (options.incremental) {
            this.incremental = new Incremental_1.Incremental(this.config);
        }
        this.target = path_1.default.resolve(process.cwd(), target);
        this.options = options;
        this.compressionInstance = this.getCompressionInstance();
        this.createCompression = this.compressionInstance.getCompression();
    }
    /**
     * Start compressing files.
     */
    Compress.prototype.run = function () {
        return __awaiter(this, void 0, void 0, function () {
            var files, hrtime, hrtimeStart, error_1, filesCount;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 10, , 11]);
                        if (!this.outputPath) return [3 /*break*/, 2];
                        return [4 /*yield*/, helpers_1.Helpers.createFolders(this.outputPath)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        if (!this.options.incremental) return [3 /*break*/, 5];
                        this.logger.log(constants_1.INCREMENTAL_ENABLE_MESSAGE, LogLevel_enum_1.LogLevel.INFO);
                        return [4 /*yield*/, this.incremental.initCacheFolder()];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, this.incremental.readConfig()];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        this.compressionLog();
                        hrtimeStart = process.hrtime();
                        return [4 /*yield*/, this.compileFolderRecursively(this.target)];
                    case 6:
                        files = _a.sent();
                        hrtime = process.hrtime(hrtimeStart);
                        if (!this.options.incremental) return [3 /*break*/, 9];
                        return [4 /*yield*/, this.incremental.updateConfig()];
                    case 7:
                        _a.sent();
                        return [4 /*yield*/, this.config.writeConfig()];
                    case 8:
                        _a.sent();
                        _a.label = 9;
                    case 9: return [3 /*break*/, 11];
                    case 10:
                        error_1 = _a.sent();
                        this.logger.log(error_1, LogLevel_enum_1.LogLevel.ERROR);
                        throw new Error(error_1.message);
                    case 11:
                        filesCount = files.length;
                        if (filesCount) {
                            this.logger.log(filesCount + " " + (filesCount > 1 ? 'files have' : 'file has') + " been compressed. (" + helpers_1.Helpers.readableHrtime(hrtime) + ")", LogLevel_enum_1.LogLevel.SUCCESS);
                        }
                        else {
                            this.logger.log(constants_1.NO_FILES_MESSAGE, LogLevel_enum_1.LogLevel.WARNING);
                        }
                        return [2 /*return*/, files];
                }
            });
        });
    };
    /**
     * Return compression instance.
     */
    Compress.prototype.getCompressionInstance = function () {
        if (this.options.brotli) {
            return new Brotli_1.BrotliCompression(this.options, this.logger);
        }
        else if (this.options.deflate) {
            return new Deflate_1.DeflateCompression(this.options, this.logger);
        }
        else {
            return new Gzip_1.GzipCompression(this.options, this.logger);
        }
    };
    /**
     * Compile files in folder recursively.
     */
    Compress.prototype.compileFolderRecursively = function (target) {
        return __awaiter(this, void 0, void 0, function () {
            var compressedFiles, isFileTarget, filesList, targetParsed, filesList_1, filesList_1_1, file, filePath, fileStat, _a, _b, _c, _d, hrtimeStart, fileInfo, hrTimeEnd, e_1_1;
            var e_1, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        compressedFiles = [];
                        return [4 /*yield*/, this.nativeFs.lstat(target)];
                    case 1:
                        isFileTarget = (_f.sent()).isFile();
                        if (!isFileTarget) return [3 /*break*/, 2];
                        targetParsed = path_1.default.parse(target);
                        target = targetParsed.dir;
                        filesList = [targetParsed.base];
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.nativeFs.readdir(target)];
                    case 3:
                        filesList = _f.sent();
                        _f.label = 4;
                    case 4:
                        _f.trys.push([4, 12, 13, 14]);
                        filesList_1 = __values(filesList), filesList_1_1 = filesList_1.next();
                        _f.label = 5;
                    case 5:
                        if (!!filesList_1_1.done) return [3 /*break*/, 11];
                        file = filesList_1_1.value;
                        filePath = path_1.default.resolve(target, file);
                        return [4 /*yield*/, this.nativeFs.lstat(filePath)];
                    case 6:
                        fileStat = _f.sent();
                        if (!fileStat.isDirectory()) return [3 /*break*/, 8];
                        _b = (_a = compressedFiles.push).apply;
                        _c = [compressedFiles];
                        _d = [[]];
                        return [4 /*yield*/, this.compileFolderRecursively(filePath)];
                    case 7:
                        _b.apply(_a, _c.concat([__spreadArray.apply(void 0, _d.concat([__read.apply(void 0, [(_f.sent())])]))]));
                        return [3 /*break*/, 10];
                    case 8:
                        if (!(fileStat.isFile() &&
                            this.isValidFileExtensions(path_1.default.extname(filePath).slice(1)))) return [3 /*break*/, 10];
                        if (fileStat.size < this.options.threshold) {
                            return [3 /*break*/, 10];
                        }
                        hrtimeStart = process.hrtime();
                        return [4 /*yield*/, this.compressFile(file, target, this.outputPath)];
                    case 9:
                        fileInfo = _f.sent();
                        if (!fileInfo.removeCompiled && !fileInfo.isSkipped) {
                            compressedFiles.push(filePath);
                        }
                        if (this.options.verbose) {
                            hrTimeEnd = process.hrtime(hrtimeStart);
                            this.logger.log(this.getCompressedFileMsg(file, fileInfo, hrTimeEnd));
                        }
                        _f.label = 10;
                    case 10:
                        filesList_1_1 = filesList_1.next();
                        return [3 /*break*/, 5];
                    case 11: return [3 /*break*/, 14];
                    case 12:
                        e_1_1 = _f.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 14];
                    case 13:
                        try {
                            if (filesList_1_1 && !filesList_1_1.done && (_e = filesList_1.return)) _e.call(filesList_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 14: return [2 /*return*/, compressedFiles];
                }
            });
        });
    };
    /**
     * File compression.
     */
    Compress.prototype.compressFile = function (filename, target, outputDir) {
        return __awaiter(this, void 0, void 0, function () {
            var isCached, isSkipped, inputPath, isFileTarget, outputPath, checksum, _a, isChanged, fileId, cachedFile, beforeSize, afterSize, removeCompiled;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        isCached = false;
                        isSkipped = false;
                        inputPath = path_1.default.join(target, filename);
                        if (!outputDir) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.nativeFs.lstat(this.target)];
                    case 1:
                        isFileTarget = (_b.sent()).isFile();
                        target = isFileTarget
                            ? outputDir
                            : path_1.default.join(outputDir, path_1.default.relative(this.target, target));
                        return [4 /*yield*/, helpers_1.Helpers.createFolders(target)];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3:
                        outputPath = this.getOutputPath(target, filename);
                        if (!this.options.skipCompressed) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.nativeFs.exists(outputPath)];
                    case 4:
                        if (_b.sent()) {
                            isSkipped = true;
                            return [2 /*return*/, { isCached: isCached, isSkipped: isSkipped }];
                        }
                        _b.label = 5;
                    case 5:
                        if (!this.options.incremental) return [3 /*break*/, 13];
                        return [4 /*yield*/, this.incremental.getFileChecksum(inputPath)];
                    case 6:
                        checksum = _b.sent();
                        return [4 /*yield*/, this.incremental.setFile(inputPath, checksum, this.compressionInstance.compressionOptions)];
                    case 7:
                        _a = _b.sent(), isChanged = _a.isChanged, fileId = _a.fileId;
                        cachedFile = path_1.default.resolve(this.incremental.cacheFolder, fileId);
                        if (!isChanged) return [3 /*break*/, 10];
                        return [4 /*yield*/, this.nativeStream.pipeline(fs_1.default.createReadStream(inputPath), this.createCompression(), fs_1.default.createWriteStream(outputPath))];
                    case 8:
                        _b.sent();
                        return [4 /*yield*/, this.nativeStream.pipeline(fs_1.default.createReadStream(outputPath), fs_1.default.createWriteStream(cachedFile))];
                    case 9:
                        _b.sent();
                        return [3 /*break*/, 12];
                    case 10: return [4 /*yield*/, this.nativeStream.pipeline(fs_1.default.createReadStream(cachedFile), fs_1.default.createWriteStream(outputPath))];
                    case 11:
                        _b.sent();
                        isCached = true;
                        _b.label = 12;
                    case 12: return [3 /*break*/, 15];
                    case 13: return [4 /*yield*/, this.nativeStream.pipeline(fs_1.default.createReadStream(inputPath), this.createCompression(), fs_1.default.createWriteStream(outputPath))];
                    case 14:
                        _b.sent();
                        _b.label = 15;
                    case 15:
                        if (!(this.options.verbose || this.options.removeLarger)) return [3 /*break*/, 20];
                        return [4 /*yield*/, this.nativeFs.lstat(inputPath)];
                    case 16:
                        beforeSize = (_b.sent()).size;
                        return [4 /*yield*/, this.nativeFs.lstat(outputPath)];
                    case 17:
                        afterSize = (_b.sent()).size;
                        removeCompiled = this.options.removeLarger && beforeSize < afterSize;
                        if (!removeCompiled) return [3 /*break*/, 19];
                        return [4 /*yield*/, this.nativeFs.unlink(outputPath)];
                    case 18:
                        _b.sent();
                        _b.label = 19;
                    case 19: return [2 /*return*/, {
                            beforeSize: beforeSize,
                            afterSize: afterSize,
                            isCached: isCached,
                            isSkipped: isSkipped,
                            removeCompiled: removeCompiled,
                        }];
                    case 20: return [2 /*return*/, { isCached: isCached, isSkipped: isSkipped }];
                }
            });
        });
    };
    /**
     * Show message with compression params.
     */
    Compress.prototype.compressionLog = function () {
        var options = this.compressionInstance.readableOptions();
        this.logger.log("Compression " + options, LogLevel_enum_1.LogLevel.INFO);
        if (!this.options.outputFileFormat) {
            this.logger.log(constants_1.DEFAULT_OUTPUT_FORMAT_MESSAGE, LogLevel_enum_1.LogLevel.INFO);
        }
    };
    /**
     * Get output path which is based on [outputFileFormat].
     */
    Compress.prototype.getOutputPath = function (target, file) {
        var artifactsMap = new Map([
            ['[filename]', path_1.default.parse(file).name],
            ['[ext]', path_1.default.extname(file).slice(1)],
            ['[compressExt]', this.compressionInstance.ext],
        ]);
        var filename = artifactsMap.get('[filename]') + "." + artifactsMap.get('[ext]') + "." + artifactsMap.get('[compressExt]');
        if (this.options.outputFileFormat) {
            artifactsMap.set('[hash]', null);
            filename = this.options.outputFileFormat.replace(constants_1.OUTPUT_FILE_FORMAT_REGEXP, function (artifact) {
                if (artifactsMap.has(artifact)) {
                    // Need to generate hash only if we have appropriate param
                    if (artifact === '[hash]') {
                        artifactsMap.set('[hash]', uuid_1.v4());
                    }
                    return artifactsMap.get(artifact);
                }
                else {
                    return artifact;
                }
            });
        }
        return "" + path_1.default.join(target, filename);
    };
    /**
     * Returns if the file extension is valid.
     */
    Compress.prototype.isValidFileExtensions = function (ext) {
        if (constants_1.COMPRESSION_EXTENSIONS.includes(ext)) {
            return false;
        }
        var excludeExtensions = this.options.exclude;
        var includeExtensions = this.options.include;
        if (includeExtensions === null || includeExtensions === void 0 ? void 0 : includeExtensions.length) {
            return includeExtensions.includes(ext);
        }
        if (excludeExtensions === null || excludeExtensions === void 0 ? void 0 : excludeExtensions.length) {
            return !excludeExtensions.includes(ext);
        }
        return true;
    };
    /**
     * Returns information message about compressed file (size, time, cache, etc.)
     */
    Compress.prototype.getCompressedFileMsg = function (file, fileInfo, hrtime) {
        if (fileInfo.isSkipped) {
            return "File " + file + " has been skipped";
        }
        var getSize = helpers_1.Helpers.readableSize(fileInfo.beforeSize) + " -> " + helpers_1.Helpers.readableSize(fileInfo.afterSize);
        return fileInfo.isCached
            ? "File " + file + " has been retrieved from the cache " + getSize + " (" + helpers_1.Helpers.readableHrtime(hrtime) + ")"
            : "File " + file + " has been compressed " + getSize + " (" + helpers_1.Helpers.readableHrtime(hrtime) + ")";
    };
    return Compress;
}());
exports.Compress = Compress;
//# sourceMappingURL=data:application/json;base64,